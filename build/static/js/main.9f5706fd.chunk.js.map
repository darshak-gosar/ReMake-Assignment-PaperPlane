{"version":3,"sources":["Constants.js","services.js","Components/Rating.js","Components/Movie.js","Components/MovieList.js","Components/Genres.js","Components/Loader.js","Container/ReMake.js","App.js","serviceWorker.js","index.js"],"names":["apiKey","apiURLs","apiCall","a","Promise","all","fetch","constantVal","promise","map","p","json","catch","err","console","log","ratingFilter","props","className","min","max","step","value","currentValue","labels","0","5","10","onChange","change","movies","href","title","movie","alt","src","poster_path","data-loaded","clicked","genre_ids","vote_average","movieList","id","length","Movie","key","click","genresList","genureList","genre","onClick","activeLinks","indexOf","data-value","name","loader","Component","filterMovies","genreFilter","filter","every","includes","rangeFilterChange","rangeValue","setState","prevState","filteredData","moviesList","activeLink","sort","b","popularity","state","error","isLoaded","genres","getGenres","bind","handleClick","results","obj","genure","some","o","push","movieResult","this","getGenreName","Object","keys","join","concat","activeLinkIndex","splice","data","filterData","updateData","updateLink","Container","Row","Col","md","sm","xs","Genres","Rating","MovieList","Loader","React","App","ReMake","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","message"],"mappings":"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","file":"static/js/main.9f5706fd.chunk.js","sourcesContent":["export const apiKey = \"a5d4b72b32ca6d7281a849a4bbe3eacf\";\nexport const apiURLs = [\"https://api.themoviedb.org/3/movie/now_playing?api_key=\"+apiKey,\"https://api.themoviedb.org/3/genre/movie/list?api_key=\"+apiKey];\nexport const defaultRange = 3;","import * as constantVal from './Constants';\n\n/**\n * API Call Mounted with Promise and when Promise is returned render the DOM\n */\nexport const apiCall = async () => {\n  //  Mapping API calls to Promise\n\n  const promise = await Promise.all(\n    [\n      fetch(constantVal.apiURLs[0]),\n      fetch(constantVal.apiURLs[1]),\n    ])\n  return Promise.all(promise.map(p => p.json()))\n    .catch(function (err) {\n      console.log('A promise failed to resolve', err);\n      return err;\n    })\n\n}","import React from 'react';\nimport Slider from 'react-rangeslider';\n\nconst ratingFilter = (props) => {\n    const sliderLabels = {\n        0: '0',\n        5: '5',\n        10: '10'\n    }\n    return (\n        <div className=\"filter\">\n            <h3>Rating</h3>\n            <div className='slider orientation-reversed'>\n                <div className='slider-group'>\n                    <div className='slider-horizontal'>\n                        {/* Range Slider being called */}\n                        <Slider\n                            min={0}\n                            max={10}\n                            step={0.5}\n                            value={props.currentValue}\n                            labels={sliderLabels}\n                            onChange={props.change} />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default ratingFilter;","import React from 'react'\n\nconst movies = (props) => {\n    return (\n        <div className=\"card style_1\">\n            <div className=\"image\">\n                <div className=\"wrapper\">\n                    <a className=\"image\" href=\"#\" title={props.movie.title}>\n                        <img className=\"poster lazyload lazyloaded\" alt=\"\" src={\"https://image.tmdb.org/t/p/w500/\" + props.movie.poster_path} data-loaded=\"true\"></img>\n                    </a>\n                </div>\n            </div>\n            <div className=\"content\">\n                <h2><a href=\"#\" title={props.movie.title}>{props.movie.title}</a></h2>\n                <p><b>Genres: </b>{props.clicked(props.movie.genre_ids)}</p>\n                <br />\n                <p><b>Rating: </b>{props.movie.vote_average}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default movies;","import React from 'react';\nimport Movie from './Movie'\n\nconst movieList = (props) => {\n    return (\n        <section id=\"media_results\" className=\"panel\">\n            <div className=\"media_items results\">\n                <div className=\"page_wrapper\">\n                    { props.movieList && props.movieList.length > 0 ?\n                    props.movieList.map(movie => (\n                        <Movie key={movie.id} movie={movie} clicked={props.click}></Movie>\n                    )) : <div>Sorry No Result</div> \n                    }\n                </div>\n            </div>\n        </section>\n    );\n}\n\nexport default movieList;","import React from 'react';\n\nconst genresList = (props) => {\n    return (\n        <div className=\"filter\">\n            <h3>Genres</h3>\n            <ul id=\"genres\" className=\"multi_select text\">\n                {props.genureList.map(genre => (\n                    <li onClick={() => props.click(genre.id)}\n                        className={\n                            (props.activeLinks.indexOf(genre.id) !== -1 ? \"selected\" : \"\")\n                        } key={genre.id} data-value={genre.id}><a href=\"#\">{genre.name}</a></li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n\nexport default genresList;","import React from 'react'\n\nconst loader = () => {\n    return (\n        <div className=\"loader\"></div>\n    );\n}\n\nexport default loader;","import React from 'react';\nimport { Container, Row, Col } from 'reactstrap';\nimport { apiCall } from '../services';\nimport * as constantValues from '../Constants'\nimport Rating from '../Components/Rating';\nimport MovieList from '../Components/MovieList';\nimport Genres from '../Components/Genres';\nimport Loader from '../Components/Loader';\n\nclass Component extends React.Component {\n    constructor(props) {\n        super(props);\n        //this.state Object to maintain the states when fetched and loaded\n        this.state = {\n            error: null,\n            isLoaded: false,\n            movies: [],\n            genres: [],\n            activeLink: [],\n            value: constantValues.defaultRange,\n            moviesList: []\n        };\n        this.getGenres = this.getGenres.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    /**\n     * API call with mapping result to state\n     */\n    async componentDidMount() {\n        let results = await apiCall();\n        let genres = [];\n        //Filtering only those Genres which are present in Movies\n        results[1].genres.map((obj) => {\n            results[0].results.filter((genure) => {\n                if (genure.genre_ids.includes(obj.id) && !genres.some(o => o.id === obj.id)) {\n                    genres.push(obj);\n                }\n            })\n        });\n        let movieResult = results[0].results.filter((genure) => genure.vote_average >= this.state.value)\n        this.setState({\n            isLoaded: true,\n            movies: movieResult.sort((a, b) => (b.popularity - a.popularity)),\n            genres: genres,\n            value: constantValues.defaultRange,\n            moviesList: results[0].results\n        });\n    }\n\n    /**\n     * Getting Genre id and fetch the name to print \n     * @param {*} id \n     */\n    getGenres(id) {\n        var getGenreName = this.state.genres.filter((genre) => id.includes(genre.id));\n        return Object.keys(getGenreName).map((key) => getGenreName[key].name).join()\n    }\n\n    /**\n     * Handling Genre Click for filtering data based on selected Genre\n     * @param {*} id \n     */\n    handleClick(id) {\n        //Once the Data is filtered, Sort the Data\n        this.setState((prevState, props) => {\n            let activeLinks = prevState.activeLink.concat([]) || []\n            let activeLinkIndex = activeLinks.indexOf(id);\n            if (activeLinkIndex === -1) {\n                activeLinks.push(id);\n            } else {\n                activeLinks.splice(activeLinkIndex, 1);\n            }\n            let filteredData = this.filterMovies(prevState.moviesList, prevState.value, activeLinks);\n            return {\n                activeLink: activeLinks,\n                movies: filteredData.sort((a, b) => (b.popularity - a.popularity))\n            }\n        })\n    };\n\n    /**\n     * Updating Data JSON based on Genre passed and maintain the Data\n     * @param {*} data \n     * @param {*} filterData \n     */\n    updateData(data, filterData) {\n        let updateData = data;\n        this.updateLink.map((obj) => {\n            updateData = filterData.filter((genure) => genure.genre_ids.includes(obj))\n        })\n        return updateData;\n    }\n\n    /**\n     * Filtering the data based on Rating and Genres list\n     */\n    filterMovies = (movieList, ratingFilter, genreFilter) => {\n        return movieList.filter((movie) => {\n            if (movie.vote_average < ratingFilter) {\n                return false;\n            }\n            if (!genreFilter.every((genre) => movie.genre_ids.includes(genre))) {\n                return false;\n            }\n            return true;\n        })\n    }\n\n    /**\n    * Range Selector Functionality based on Change of Range\n    */\n    rangeFilterChange = rangeValue => {\n        //Once the Data is filtered, Sort the Data\n        this.setState((prevState, props) => {\n            let filteredData = this.filterMovies(prevState.moviesList, rangeValue, prevState.activeLink);\n            return {\n                value: rangeValue,\n                movies: filteredData.sort((a, b) => (b.popularity - a.popularity))\n            }\n        })\n    };\n\n    render() {\n        //Maintaining the state if link clicked on Genre\n        const { value, activeLink } = this.state;\n        return (\n            <Container className=\"custom-conatiner\">\n                {this.state.isLoaded ?\n                    <Row>\n                        <Col md={3} sm={12} xs={12}>\n                            <div className=\"filter_panel card\">\n                                {/* Genre Component */}\n                                <Genres activeLinks={activeLink} genureList={this.state.genres} click={this.handleClick}></Genres>\n                                {/* Rating Component */}\n                                <Rating currentValue={value} change={this.rangeFilterChange}></Rating>\n                            </div>\n                        </Col>\n                        <Col md={9} sm={12} xs={12}>\n                            {/* Movie Component */}\n                            <MovieList movieList={this.state.movies} click={this.getGenres}></MovieList>\n                        </Col>\n                    </Row> : <Loader /> // Loader Component\n                }\n            </Container>\n        );\n    }\n}\n\nexport default Component;","import React from 'react';\nimport './App.css';\nimport ReMake from './Container/ReMake';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>ReMake Assignment: PaperPlane</h1>\n      </header>\n      <ReMake></ReMake>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-rangeslider/lib/index.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}