{"version":3,"sources":["Component.js","App.js","serviceWorker.js","index.js"],"names":["Component","props","currentValues","updateLink","updatedCurrentValues","rangeFilterChange","value","rangedData","currentVal","rangeFilterVal","length","filter","genure","vote_average","sortByPriceDesc","setState","movies","state","error","isLoaded","genres","activeLink","Promise","all","fetch","then","results","map","r","json","sort","a","b","popularity","id","getGenreName","this","genre","includes","Object","keys","key","name","join","prevState","filteredData","index","indexOf","push","updateData","splice","obj","genre_ids","data","filterData","Container","className","Row","Col","md","sm","xs","onClick","handleClick","data-value","href","min","max","step","labels","0","5","10","onChange","movie","title","alt","src","poster_path","data-loaded","getGenres","React","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b6822dd7.chunk.js","sourcesContent":["import React from 'react';\nimport { Container, Row, Col } from 'reactstrap';\nimport Slider from 'react-rangeslider'\n\nclass Component extends React.Component {\n  currentValues = {};\n  updateLink = [];\n  updatedCurrentValues = {};\n  constructor(props) {\n    super(props);\n    //this.state Object to maintain the states when fetched and loaded\n    this.state = {\n      error: null,\n      isLoaded: false,\n      movies: [],\n      genres: [],\n      activeLink: [],\n      value: 3,\n    };\n  }\n\n   /**\n   * API Call Mounted with Promise and when Promise is returned render the DOM\n   */\n  componentDidMount() {\n    //Mapping API calls to Promise\n    const promises = Promise.all([\n      fetch(\"https://api.themoviedb.org/3/movie/now_playing?api_key=a5d4b72b32ca6d7281a849a4bbe3eacf\"),\n      fetch(\"https://api.themoviedb.org/3/genre/movie/list?api_key=a5d4b72b32ca6d7281a849a4bbe3eacf\")\n    ]);\n\n    //Getting Response from Promise\n    promises\n      .then((results) =>\n        Promise.all(results.map(r => r.json())\n        ))\n      .then((results) => {\n        this.currentValues = results[0].results;\n        this.setState({\n          isLoaded: true,\n          movies: results[0].results.sort((a, b) => (b.popularity - a.popularity)),\n          genres: results[1].genres,\n          value: 3\n        });\n      },\n        // For handling errors here\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  /**\n   * Getting Genre id and fetch the name to print \n   * @param {*} id \n   */\n  getGenres(id) {\n    var getGenreName = this.state.genres.filter((genre) => id.includes(genre.id));\n    return Object.keys(getGenreName).map((key) => getGenreName[key].name).join()\n  }\n\n  /**\n   * Sort the data based on Popularity\n   */\n  sortByPriceDesc() {\n    this.setState(prevState => {\n      this.state.movies.sort((a, b) => (b.popularity - a.popularity))\n    });\n  }\n\n  /**\n   * Handling Genre Click for filtering data based on selected Genre\n   * @param {*} id \n   */\n  handleClick(id) {\n    let filteredData = this.currentValues;\n    var index = this.updateLink.indexOf(id)\n    if (this.updateLink && this.updateLink.length === 0) {\n      this.updateLink.push(id);\n      filteredData = this.updateData(filteredData, this.state.movies);\n      this.updatedCurrentValues = filteredData;\n    } else if (this.updateLink && this.updateLink.length > 0) {\n      if (index === -1) {\n        this.updateLink.push(id);\n        filteredData = this.updateData(filteredData, this.state.movies);\n        this.updatedCurrentValues = filteredData;\n      } else {\n        this.updateLink.splice(index, 1);\n        // filteredData = this.updateData(this.currentValues,currentValues);\n        let currentValues = this.currentValues;\n        this.updateLink.map((obj) => {\n          currentValues = currentValues.filter((genure) => genure.genre_ids.includes(obj))\n        })\n        filteredData = currentValues;\n        this.updatedCurrentValues = filteredData;\n      }\n    }\n    //Once the Data is filtered, Sort the Data\n    this.sortByPriceDesc();\n    this.setState({\n      activeLink: this.updateLink,\n      movies: filteredData\n    });\n  };\n\n  /**\n   * Updating Data JSON based on Genre passed and maintain the Data\n   * @param {*} data \n   * @param {*} filterData \n   */\n  updateData(data, filterData) {\n    let updateData = data;\n    this.updateLink.map((obj) => {\n      updateData = filterData.filter((genure) => genure.genre_ids.includes(obj))\n    })\n    return updateData;\n  }\n\n  /**\n  * Range Selector Functionality based on Change of Range\n  */\n  rangeFilterChange = value => {\n    var currentVal = value;\n    var rangedData;\n    var rangeFilterVal = this.updatedCurrentValues;\n    if (this.updateLink && this.updateLink.length > 0) {\n      rangedData = rangeFilterVal.filter((genure) => genure.vote_average >= currentVal)\n    } else {\n      rangedData = this.currentValues.filter((genure) => genure.vote_average >= currentVal)\n    }\n    //Once the Data is filtered, Sort the Data\n    this.sortByPriceDesc();\n    this.setState({\n      movies: rangedData,\n      value: currentVal\n    });\n  };\n\n  render() {\n    //Maintaining the state if link clicked on Genre\n    const { value, activeLink } = this.state;\n    const sliderLabels = {\n      0: '0',\n      5: '5',\n      10: '10'\n    }\n    return (\n      <Container className=\"custom-conatiner\">\n        <Row>\n          <Col md={3} sm={12} xs={12}>\n            <div className=\"filter_panel card\">\n              <div className=\"filter\">\n                <h3>Genres</h3>\n                <ul id=\"genres\" className=\"multi_select text\">\n                  {this.state.genres.map(genre => (\n                    <li onClick={() => this.handleClick(genre.id)}\n                      className={\n                        (activeLink.indexOf(genre.id) !== -1 ? \"selected\" : \"\")\n                      } key={genre.id} data-value={genre.id}><a className=\"no_click\" href=\"#\">{genre.name}</a></li>\n                  ))}\n                </ul>\n              </div>\n              <div className=\"filter\">\n                <h3>Rating</h3>\n                <div className='slider orientation-reversed'>\n                  <div className='slider-group'>\n                    <div className='slider-horizontal'>\n                      {/* Range Slider being called */}\n                      <Slider\n                        min={0}\n                        max={10}\n                        step={0.5}\n                        value={value}\n                        labels={sliderLabels}\n                        onChange={this.rangeFilterChange} />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </Col>\n          <Col md={9} sm={12} xs={12}>\n            <div className=\"no_pad\">\n              <section id=\"media_results\" className=\"panel\">\n                <div className=\"media_items results\">\n                  <div id=\"page_1\" className=\"page_wrapper\">\n                    {this.state.movies.map(movie => (\n                      <div key={movie.id} className=\"card style_1\">\n                        <div className=\"image\">\n                          <div className=\"wrapper\">\n                            <a className=\"image\" href=\"#\" title={movie.title}>\n                              <img className=\"poster lazyload lazyloaded\" alt=\"\" src={\"https://image.tmdb.org/t/p/w500/\" + movie.poster_path} data-loaded=\"true\"></img>\n                            </a>\n                          </div>\n                        </div>\n                        <div className=\"content\">\n                          <h2><a href=\"#\" title={movie.title}>{movie.title}</a></h2>\n                          <p><b>Genres: </b>{this.getGenres(movie.genre_ids)}</p>\n                          <br />\n                          <p><b>Rating: </b>{movie.vote_average}</p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </section>\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Component;","import React from 'react';\nimport './App.css';\nimport Component from './Component'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>ReMake Assignment: PaperPlane</h1>\n      </header>\n      <Component></Component>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-rangeslider/lib/index.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}